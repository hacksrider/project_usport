generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model bookings {
  user_ID              Int
  field_ID             Int
  booking_date         DateTime
  desired_booking_date DateTime
  payment_confirmation String    @db.VarChar(255)
  emp_ID               Int
  booking_ID           Int       @id @default(autoincrement())
  booking_status       Boolean
  Price                Int
  end_Time             DateTime
  start_Time           DateTime
  employees            employees @relation(fields: [emp_ID], references: [emp_ID], map: "Bookings_emp_ID_fkey")
  fields               fields    @relation(fields: [field_ID], references: [field_ID], map: "Bookings_field_ID_fkey")
  users                users     @relation(fields: [user_ID], references: [user_ID], map: "Bookings_user_ID_fkey")

  @@index([emp_ID], map: "Bookings_emp_ID_fkey")
  @@index([field_ID], map: "Bookings_field_ID_fkey")
  @@index([user_ID], map: "Bookings_user_ID_fkey")
}

model buying_exercise {
  buying_ID            Int      @id @default(autoincrement())
  user_ID              Int
  payment_confirmation String   @db.VarChar(255)
  buying_date          DateTime
  buying_status        Boolean
  emp_ID               Int?

  // Relationships
  employees           employees?            @relation(fields: [emp_ID], references: [emp_ID], map: "Buying_Exercise_emp_ID_fkey")
  users               users                 @relation(fields: [user_ID], references: [user_ID], map: "Buying_Exercise_user_ID_fkey")
  orders_exercise     orders_exercise[]
  service_of_exercise service_of_exercise[]

  @@index([emp_ID], map: "Buying_Exercise_emp_ID_fkey")
  @@index([user_ID], map: "Buying_Exercise_user_ID_fkey")
}

model orders_exercise {
  order_ID           Int      @id @default(autoincrement())
  buying_ID          Int
  service_ID         Int
  service_name       String
  amount_of_time     String   @db.VarChar(15)
  units              String   @db.VarChar(10)
  desired_start_date DateTime
  status_order       Int      @default(0)
  expire_date        DateTime
  Price              Int

  // Relationships
  buying_exercise     buying_exercise     @relation(fields: [buying_ID], references: [buying_ID], map: "Order_Buying_Exercise_fkey", onDelete: Cascade)
  service_of_exercise service_of_exercise @relation(fields: [service_ID], references: [service_ID], map: "Order_Service_ID_fkey")

  @@index([buying_ID], map: "Order_Buying_Exercise_fkey")
  @@index([service_ID], map: "Order_Service_ID_fkey")
}

model content {
  content_ID       Int    @id @default(autoincrement())
  img_content_path String @db.VarChar(255)
}

model employees {
  emp_ID          Int               @id @default(autoincrement())
  emp_tel         String?           @db.VarChar(10)
  emp_job         Boolean
  emp_username    String            @unique(map: "Employees_emp_username_key") @db.VarChar(20)
  emp_sex         String?           @db.VarChar(50)
  emp_lastname    String            @db.VarChar(50)
  emp_name        String            @db.VarChar(50)
  emp_password    String            @db.VarChar(10)
  bookings        bookings[]
  buying_exercise buying_exercise[]
}

model fields {
  field_ID   Int          @id @default(autoincrement())
  field_name String       @db.VarChar(15)
  status     Boolean
  bookings   bookings[]
  pricefield pricefield[]
}

model period {
  period_ID    Int          @id @default(autoincrement())
  period_start DateTime
  period_end   DateTime
  pricefield   pricefield[]
}

model price_exercise {
  price_ID            Int                 @id @default(autoincrement())
  service_ID          Int
  time_ID             Int
  price               Int
  service_of_exercise service_of_exercise @relation(fields: [service_ID], references: [service_ID], onDelete: Cascade, map: "Price_Exercise_service_ID_fkey")
  time_of_service     time_of_service     @relation(fields: [time_ID], references: [time_ID], map: "Price_Exercise_time_ID_fkey")

  @@index([service_ID], map: "Price_Exercise_service_ID_fkey")
  @@index([time_ID], map: "Price_Exercise_time_ID_fkey")
}

model pricefield {
  price_ID     Int    @id @default(autoincrement())
  field_ID     Int
  period_ID    Int
  price_for_2h Int
  price_per_1h Int
  fields       fields @relation(fields: [field_ID], references: [field_ID], map: "PriceField_field_ID_fkey")
  period       period @relation(fields: [period_ID], references: [period_ID], map: "PriceField_period_ID_fkey")

  @@index([field_ID], map: "PriceField_field_ID_fkey")
  @@index([period_ID], map: "PriceField_period_ID_fkey")
}

model reviews {
  re_ID               Int                 @id @default(autoincrement())
  user_ID             Int
  service_ID          Int
  score               Int
  Text_review         String              @db.Text
  service_of_exercise service_of_exercise @relation(fields: [service_ID], references: [service_ID], map: "Reviews_service_ID_fkey")
  users               users               @relation(fields: [user_ID], references: [user_ID], map: "Reviews_user_ID_fkey")

  @@index([service_ID], map: "Reviews_service_ID_fkey")
  @@index([user_ID], map: "Reviews_user_ID_fkey")
}

model service_of_exercise {
  service_ID       Int               @id @default(autoincrement())
  service_name     String            @db.VarChar(20)
  capacity_of_room Int
  Status           Boolean
  buying_exercise  buying_exercise[]
  price_exercise   price_exercise[]
  reviews          reviews[]

  orders_exercise orders_exercise[] @relation(map: "Order_Service_ID_fkey")
}

model time_of_service {
  time_ID          Int              @id @default(autoincrement())
  quantity_of_days Int
  unit             String           @db.VarChar(10)
  price_exercise   price_exercise[]
}

model users {
  user_ID                  Int               @id @default(autoincrement())
  user_name                String            @db.VarChar(50)
  user_date_of_birth       DateTime
  user_tel                 String            @db.VarChar(15)
  user_username            String            @unique(map: "Users_user_username_key") @db.VarChar(20)
  ID_card_photo            String?           @db.VarChar(255)
  accom_rent_contrac_photo String?           @db.VarChar(255)
  status_of_VIP            Boolean           @default(false)
  status_of_Member         Boolean           @default(false)
  user_email               String?           @unique(map: "Users_user_email_key") @db.VarChar(100)
  user_lastname            String            @db.VarChar(50)
  user_password            String            @db.VarChar(255)
  sex                      String?           @db.VarChar(20)
  user_profile_picture     String?           @db.VarChar(255)
  bookings                 bookings[]
  buying_exercise          buying_exercise[]
  reviews                  reviews[]
}

model page_about {
  page_about_id  Int    @id @default(autoincrement())
  title          String @db.VarChar(50)
  detail         String @db.VarChar(255)
  banner         String @db.VarChar(255)
  detail_usport1 String @db.VarChar(255)
  detail_usport2 String @db.VarChar(255)
  video          String @db.VarChar(255)

  exercise_about exercise_about[]
}

model exercise_about {
  exercise_about_id Int    @id @default(autoincrement())
  title             String @db.VarChar(50)
  detail            String @db.VarChar(255)

  page_about_id Int
  page_about    page_about @relation(fields: [page_about_id], references: [page_about_id], map: "Order_Page_About_fkey", onDelete: Cascade)

  @@index([exercise_about_id], map: "Order_Buying_Exercise_fkey")
}

//npx prisma migrate dev --name init
