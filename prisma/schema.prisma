generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model users {
  user_ID                  Int               @id @default(autoincrement())
  user_name                String            @db.VarChar(50)
  user_date_of_birth       DateTime
  user_tel                 String            @db.VarChar(15)
  user_username            String            @unique(map: "Users_user_username_key") @db.VarChar(20)
  ID_card_photo            String?           @db.VarChar(255)
  accom_rent_contrac_photo String?           @db.VarChar(255)
  status_of_VIP            Boolean           @default(false)
  status_of_Member         Boolean           @default(false)
  user_email               String?           @unique(map: "Users_user_email_key") @db.VarChar(100)
  user_lastname            String            @db.VarChar(50)
  user_password            String            @db.VarChar(255)
  sex                      String?           @db.VarChar(20)
  user_profile_picture     String?           @db.VarChar(255)
  bookings                 bookings[]
  buying_exercise          buying_exercise[]
  reviews                  reviews[]

  ResetToken ResetToken[]
}

model ResetToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  user      users    @relation(fields: [userId], references: [user_ID])
  userId    Int
  expiresAt DateTime
}

model bookings {
  user_ID              Int
  field_ID             Int
  booking_date         DateTime
  desired_booking_date DateTime
  payment_confirmation String    @db.VarChar(255)
  emp_ID               Int
  booking_ID           Int       @id @default(autoincrement())
  booking_status       Boolean
  Price                Int
  end_Time             DateTime
  start_Time           DateTime
  employees            employees @relation(fields: [emp_ID], references: [emp_ID], map: "Bookings_emp_ID_fkey")
  fields               fields    @relation(fields: [field_ID], references: [field_ID], map: "Bookings_field_ID_fkey")
  users                users     @relation(fields: [user_ID], references: [user_ID], map: "Bookings_user_ID_fkey")

  @@index([emp_ID], map: "Bookings_emp_ID_fkey")
  @@index([field_ID], map: "Bookings_field_ID_fkey")
  @@index([user_ID], map: "Bookings_user_ID_fkey")
}

model buying_exercise {
  buying_ID            Int                   @id @default(autoincrement())
  user_ID              Int
  payment_confirmation String                @db.VarChar(255)
  buying_date          DateTime
  buying_status        Boolean
  emp_ID               Int?
  employees            employees?            @relation(fields: [emp_ID], references: [emp_ID], map: "Buying_Exercise_emp_ID_fkey")
  users                users                 @relation(fields: [user_ID], references: [user_ID], map: "Buying_Exercise_user_ID_fkey")
  orders_exercise      orders_exercise[]
  service_of_exercise  service_of_exercise[]

  @@index([emp_ID], map: "Buying_Exercise_emp_ID_fkey")
  @@index([user_ID], map: "Buying_Exercise_user_ID_fkey")
}

model orders_exercise {
  order_ID            Int                 @id @default(autoincrement())
  buying_ID           Int
  service_ID          Int
  service_name        String
  amount_of_time      String              @db.VarChar(15)
  units               String              @db.VarChar(10)
  desired_start_date  DateTime
  status_order        String              @default("รอใช้บริการ")
  expire_date         DateTime
  Price               Int
  buying_exercise     buying_exercise     @relation(fields: [buying_ID], references: [buying_ID], map: "Order_Buying_Exercise_fkey", onDelete: Cascade)
  service_of_exercise service_of_exercise @relation(fields: [service_ID], references: [service_ID], map: "Order_Service_ID_fkey", onDelete: Cascade)
}

model content {
  content_ID       Int    @id @default(autoincrement())
  img_content_path String @db.VarChar(255)
}

model employees {
  emp_ID          Int               @id @default(autoincrement())
  emp_tel         String?           @db.VarChar(10)
  emp_job         Boolean
  emp_username    String            @unique(map: "Employees_emp_username_key") @db.VarChar(20)
  emp_sex         String?           @db.VarChar(50)
  emp_email       String?           @unique(map: "Employees_emp_email_key") @db.VarChar(100)
  emp_lastname    String            @db.VarChar(50)
  emp_name        String            @db.VarChar(50)
  emp_password    String            @db.VarChar(10)
  bookings        bookings[]
  buying_exercise buying_exercise[]
}

model fields {
  field_ID   Int          @id @default(autoincrement())
  field_name String       @db.VarChar(15)
  status     Boolean
  bookings   bookings[]
  pricefield pricefield[]
}

model period {
  period_ID    Int          @id @default(autoincrement())
  period_start DateTime
  period_end   DateTime
  pricefield   pricefield[]
}

model pricefield {
  price_ID     Int    @id @default(autoincrement())
  field_ID     Int
  period_ID    Int
  price_for_2h Int
  price_per_1h Int
  fields       fields @relation(fields: [field_ID], references: [field_ID], map: "PriceField_field_ID_fkey")
  period       period @relation(fields: [period_ID], references: [period_ID], map: "PriceField_period_ID_fkey")

  @@index([field_ID], map: "PriceField_field_ID_fkey")
  @@index([period_ID], map: "PriceField_period_ID_fkey")
}

model reviews {
  re_ID               Int                 @id @default(autoincrement())
  user_ID             Int
  service_ID          Int
  score               Int
  Text_review         String              @db.Text
  service_of_exercise service_of_exercise @relation(fields: [service_ID], references: [service_ID], map: "Reviews_service_ID_fkey")
  users               users               @relation(fields: [user_ID], references: [user_ID], map: "Reviews_user_ID_fkey")

  @@index([service_ID], map: "Reviews_service_ID_fkey")
  @@index([user_ID], map: "Reviews_user_ID_fkey")
}

model service_of_exercise {
  service_ID       Int               @id @default(autoincrement())
  service_name     String            @db.VarChar(20)
  capacity_of_room Int
  Status           Boolean
  deleted          Int               @default(1) @db.TinyInt // 1 ใช้ 0 ไม่ใช้
  buying_exercise  buying_exercise[]
  time_and_price   time_and_price[]
  reviews          reviews[]
  orders_exercise  orders_exercise[] @relation(map: "Order_Service_ID_fkey")
}

model time_and_price {
  time_ID             Int                 @id @default(autoincrement())
  service_ID          Int
  quantity_of_days    Int?
  unit                String?             @db.VarChar(10)
  price               Int?
  service_of_exercise service_of_exercise @relation(fields: [service_ID], references: [service_ID], map: "time_and_price_service_ID_fkey", onDelete: Cascade)

  @@index([service_ID], map: "time_and_price_service_ID_fkey")
}

// ============ ส่วนจัดการหน้าต่างๆ ============

model page_home {
  page_home_id        Int                   @id @default(autoincrement())
  title               String?               @db.VarChar(50)
  subtitle            String?               @db.VarChar(255)
  banner              String?               @db.VarChar(255)
  page_home_promotion page_home_promotion[]
  page_home_exercise  page_home_exercise[]
  page_home_gallery   page_home_gallery[]
}

model page_home_exercise {
  page_home_service_id Int     @id @default(autoincrement())
  name_exercise        String? @db.VarChar(50)
  description          String? @db.VarChar(255)
  banner_exercise      String? @db.VarChar(255) // ไฟล์รูป
  page_home_id         Int

  page_home page_home @relation(fields: [page_home_id], references: [page_home_id])
}

model page_home_promotion {
  page_home_promotion_id Int     @id @default(autoincrement())
  title_promotion        String? @db.VarChar(50)
  detail_promotion       String? @db.VarChar(255)
  banner_promotion       String? @db.VarChar(255) // ไฟล์รูป
  page_home_id           Int

  page_home page_home @relation(fields: [page_home_id], references: [page_home_id])
}

model page_home_gallery {
  page_home_gallery_id Int     @id @default(autoincrement())
  picture_gallery      String? @db.VarChar(255)
  page_home_id         Int

  page_home page_home @relation(fields: [page_home_id], references: [page_home_id])
}

//////////////////////////////////////////////
model page_about {
  page_about_id  Int              @id @default(autoincrement())
  title          String?          @db.VarChar(50)
  detail         String?          @db.VarChar(255)
  banner         String?          @db.VarChar(255)
  detail_usport1 String?          @db.VarChar(255)
  detail_usport2 String?          @db.VarChar(255)
  video          String?          @db.VarChar(255)
  exercise_about exercise_about[]
}

model exercise_about {
  exercise_about_id Int        @id @default(autoincrement())
  title             String?    @db.VarChar(50)
  detail            String?    @db.VarChar(255)
  page_about_id     Int
  page_about        page_about @relation(fields: [page_about_id], references: [page_about_id], map: "Order_Page_About_fkey")

  @@index([exercise_about_id], map: "Exercise_About_Exercise_About_ID_fkey") // เปลี่ยนชื่อดัชนีที่ไม่ซ้ำ
}

////////////////////////////////////////////////
model page_contact {
  page_contact_ID  Int                @id @default(autoincrement())
  title            String?            @db.VarChar(50)
  subtitle         String?            @db.VarChar(255)
  banner           String?            @db.VarChar(255)
  title_contact    String?            @db.VarChar(50)
  subtitle_contact String?            @db.VarChar(255)
  title_map        String?            @db.VarChar(50)
  link_map         String?            @db.VarChar(2000)
  contact_channels contact_channels[]
}

model contact_channels {
  contact_channels_ID Int          @id @default(autoincrement())
  name                String?      @db.VarChar(25)
  data                String?      @db.VarChar(255)
  page_contact_ID     Int // ใช้ชื่อเดียวกับ FK ใน page_contact
  page_contact        page_contact @relation(fields: [page_contact_ID], references: [page_contact_ID], map: "Order_Page_Contact_fkey")

  @@index([contact_channels_ID], map: "Contact_Channels_Contact_Channels_ID_fkey")
}

///////////////////////////////////////////
model page_exercise {
  page_exercise_ID Int             @id @default(autoincrement())
  title            String?         @db.VarChar(50) // หัวข้อ
  subtitle         String?         @db.VarChar(255) // รายละเอียด
  banner           String?         @db.VarChar(255) // รูปภาพ
  exercise_data    exercise_data[]
}

model exercise_data {
  exercise_data_ID Int           @id @default(autoincrement())
  name             String?       @db.VarChar(25) // ชื่อบริการ
  banner           String?       @db.VarChar(255) // รูปภาพแบนเนอร์
  price            String?       @db.VarChar(25) // ราคา
  detail           String?       @db.VarChar(255) // รายละเอียด
  table_price      String?       @db.VarChar(255) // รายละเอียดราคา
  picture          String?       @db.VarChar(255) // รูปภาพบริการ
  page_exercise_ID Int // ใช้ชื่อเดียวกับ FK ใน page_exercise
  page_exercise    page_exercise @relation(fields: [page_exercise_ID], references: [page_exercise_ID], map: "Order_Page_Exercise_fkey")

  @@index([exercise_data_ID], map: "Exercise_Data_Exercise_Data_ID_fkey")
}

//npx prisma migrate dev --name init
